/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.alamantechnologies.eneditorplus.gui;

import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.Document;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.UndoManager;
import org.alamantechnologies.eneditorplus.core.CryptoUtil;
import org.alamantechnologies.eneditorplus.core.MD5Hash;
import org.alamantechnologies.eneditorplus.core.Security;
import org.alamantechnologies.eneditorplus.util.Gen_Util;
import org.alamantechnologies.eneditorplus.util.GlobalExceptionHandler;
import org.alamantechnologies.eneditorplus.util.LogManager;


/**
 *
 * @author AL-AMAN TECHNOLOGIES
 */
public class EnEditorPlus_Main_GUI extends javax.swing.JFrame {

    /**
     * Creates new form EnEditorPlus_Main_GUI
     */
    static
    {
        GlobalExceptionHandler.registerExceptionHandler();
    }
    public EnEditorPlus_Main_GUI() {
        
        initComponents();
        
        isEncrypted = false;
        isFileSaved = false;
        
        setLocationRelativeToCenter();
        setIcon();
        
        undoManager = new UndoManager();
        initUndoRedo();
        undo_JMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    undoManager.undo();
                } catch (CannotRedoException ex) {
                    Logger.getLogger(EnEditorPlus_Main_GUI.class.getName()).log(Level.SEVERE, null, ex);
                    LogManager.logErr(ex);
                }
                updateButtons();
            }
        });

        redo_JMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    undoManager.redo();
                } catch (CannotRedoException ex) {
                    Logger.getLogger(EnEditorPlus_Main_GUI.class.getName()).log(Level.SEVERE, null, ex);
                    LogManager.logErr(ex);
                }
                updateButtons();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        passwordPrompt_JDialogue = new javax.swing.JDialog(this);
        jPanel1 = new javax.swing.JPanel();
        password_JPasswordField = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        ok_JButton = new javax.swing.JButton();
        encPasswordPrompt_JDialogue = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        encPass1_JPasswordField = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        encOk_JButton = new javax.swing.JButton();
        encPass2_JPasswordField = new javax.swing.JPasswordField();
        passStatus = new javax.swing.JLabel();
        about_JDialogue = new javax.swing.JDialog();
        jPanel3 = new javax.swing.JPanel();
        companyLogo_JLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        epane = new javax.swing.JEditorPane();
        toolBar_JPanel = new javax.swing.JPanel();
        icon_JLabel = new javax.swing.JLabel();
        body_JPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        editor_JTextArea = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        file_JMenu = new javax.swing.JMenu();
        new_JMenuItem = new javax.swing.JMenuItem();
        open_JMenuItem = new javax.swing.JMenuItem();
        save_JMenuItem = new javax.swing.JMenuItem();
        saveAs_JMenuItem = new javax.swing.JMenuItem();
        exit_JMenuItem = new javax.swing.JMenuItem();
        edit_JMenu = new javax.swing.JMenu();
        cut_JMenuItem = new javax.swing.JMenuItem();
        copy_JMenuItem = new javax.swing.JMenuItem();
        paste_JMenuItem = new javax.swing.JMenuItem();
        undo_JMenuItem = new javax.swing.JMenuItem();
        redo_JMenuItem = new javax.swing.JMenuItem();
        help_JMenu = new javax.swing.JMenu();
        help_JMenuItem = new javax.swing.JMenuItem();
        about_JMenuItem = new javax.swing.JMenuItem();

        passwordPrompt_JDialogue.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        passwordPrompt_JDialogue.setTitle("Password");
        passwordPrompt_JDialogue.setAlwaysOnTop(true);
        passwordPrompt_JDialogue.setMinimumSize(new java.awt.Dimension(304, 170));
        passwordPrompt_JDialogue.setResizable(false);
        passwordPrompt_JDialogue.setSize(new java.awt.Dimension(304, 170));
        passwordPrompt_JDialogue.setType(java.awt.Window.Type.POPUP);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        password_JPasswordField.setBackground(new java.awt.Color(51, 51, 51));
        password_JPasswordField.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        password_JPasswordField.setForeground(new java.awt.Color(153, 255, 51));
        password_JPasswordField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        password_JPasswordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                password_JPasswordFieldKeyPressed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(153, 255, 102));
        jLabel1.setText("Enter the Password / Encryption Key:");

        ok_JButton.setBackground(new java.awt.Color(51, 51, 51));
        ok_JButton.setForeground(new java.awt.Color(255, 255, 255));
        ok_JButton.setText("OK");
        ok_JButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ok_JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ok_JButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(password_JPasswordField))
                .addGap(48, 48, 48))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ok_JButton)
                .addGap(120, 120, 120))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(password_JPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(ok_JButton)
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout passwordPrompt_JDialogueLayout = new javax.swing.GroupLayout(passwordPrompt_JDialogue.getContentPane());
        passwordPrompt_JDialogue.getContentPane().setLayout(passwordPrompt_JDialogueLayout);
        passwordPrompt_JDialogueLayout.setHorizontalGroup(
            passwordPrompt_JDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        passwordPrompt_JDialogueLayout.setVerticalGroup(
            passwordPrompt_JDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        encPasswordPrompt_JDialogue.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        encPasswordPrompt_JDialogue.setTitle("Password");
        encPasswordPrompt_JDialogue.setAlwaysOnTop(true);
        encPasswordPrompt_JDialogue.setMinimumSize(new java.awt.Dimension(304, 190));
        encPasswordPrompt_JDialogue.setResizable(false);
        encPasswordPrompt_JDialogue.setSize(new java.awt.Dimension(304, 220));
        encPasswordPrompt_JDialogue.setType(java.awt.Window.Type.POPUP);

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));

        encPass1_JPasswordField.setBackground(new java.awt.Color(51, 51, 51));
        encPass1_JPasswordField.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        encPass1_JPasswordField.setForeground(new java.awt.Color(153, 255, 51));
        encPass1_JPasswordField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        encPass1_JPasswordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                encPass1_JPasswordFieldKeyTyped(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(153, 255, 102));
        jLabel2.setText("Enter the Password / Encryption Key:");

        encOk_JButton.setBackground(new java.awt.Color(51, 51, 51));
        encOk_JButton.setForeground(new java.awt.Color(255, 255, 255));
        encOk_JButton.setText("OK");
        encOk_JButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        encOk_JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encOk_JButtonActionPerformed(evt);
            }
        });

        encPass2_JPasswordField.setBackground(new java.awt.Color(51, 51, 51));
        encPass2_JPasswordField.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        encPass2_JPasswordField.setForeground(new java.awt.Color(153, 255, 51));
        encPass2_JPasswordField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        encPass2_JPasswordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                encPass2_JPasswordFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                encPass2_JPasswordFieldKeyTyped(evt);
            }
        });

        passStatus.setForeground(new java.awt.Color(153, 255, 102));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(encPass1_JPasswordField)
                    .addComponent(encPass2_JPasswordField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(passStatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(48, 48, 48))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(encOk_JButton)
                .addGap(123, 123, 123))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(encPass1_JPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(encPass2_JPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(encOk_JButton)
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout encPasswordPrompt_JDialogueLayout = new javax.swing.GroupLayout(encPasswordPrompt_JDialogue.getContentPane());
        encPasswordPrompt_JDialogue.getContentPane().setLayout(encPasswordPrompt_JDialogueLayout);
        encPasswordPrompt_JDialogueLayout.setHorizontalGroup(
            encPasswordPrompt_JDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        encPasswordPrompt_JDialogueLayout.setVerticalGroup(
            encPasswordPrompt_JDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        about_JDialogue.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        about_JDialogue.setTitle("About");
        about_JDialogue.setAlwaysOnTop(true);
        about_JDialogue.setMinimumSize(new java.awt.Dimension(445, 432));
        about_JDialogue.setResizable(false);
        about_JDialogue.setSize(new java.awt.Dimension(445, 450));
        about_JDialogue.setType(java.awt.Window.Type.POPUP);

        jPanel3.setBackground(new java.awt.Color(51, 51, 51));

        companyLogo_JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/alamantechnologies/eneditorplus/img/FormatFactoryeneditor-icon.png"))); // NOI18N

        jLabel3.setBackground(new java.awt.Color(51, 51, 51));
        jLabel3.setFont(new java.awt.Font("Script MT Bold", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 255, 102));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("enEditor+");

        epane.setEditable(false);
        epane.setBackground(new java.awt.Color(51, 51, 51));
        epane.setBorder(null);
        epane.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        epane.setForeground(new java.awt.Color(0, 204, 153));
        epane.setText("enEditor+ is the new generation plain text editor. It has the capability to encrypt the  file data inorder to ensure the maximum security of data.");
        jScrollPane2.setViewportView(epane);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(companyLogo_JLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, 42))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(companyLogo_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel3)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout about_JDialogueLayout = new javax.swing.GroupLayout(about_JDialogue.getContentPane());
        about_JDialogue.getContentPane().setLayout(about_JDialogueLayout);
        about_JDialogueLayout.setHorizontalGroup(
            about_JDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        about_JDialogueLayout.setVerticalGroup(
            about_JDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("enEditor+");

        toolBar_JPanel.setBackground(new java.awt.Color(0, 51, 51));
        toolBar_JPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        icon_JLabel.setFont(new java.awt.Font("Agency FB", 1, 24)); // NOI18N
        icon_JLabel.setForeground(new java.awt.Color(255, 255, 255));
        icon_JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/alamantechnologies/eneditorplus/img/eneditor-icon.jpg"))); // NOI18N
        icon_JLabel.setText("editor +");
        icon_JLabel.setToolTipText("The next form of Text editors");

        javax.swing.GroupLayout toolBar_JPanelLayout = new javax.swing.GroupLayout(toolBar_JPanel);
        toolBar_JPanel.setLayout(toolBar_JPanelLayout);
        toolBar_JPanelLayout.setHorizontalGroup(
            toolBar_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toolBar_JPanelLayout.createSequentialGroup()
                .addComponent(icon_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        toolBar_JPanelLayout.setVerticalGroup(
            toolBar_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(icon_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, Short.MAX_VALUE)
        );

        body_JPanel.setBackground(new java.awt.Color(0, 102, 51));

        editor_JTextArea.setBackground(new java.awt.Color(51, 51, 51));
        editor_JTextArea.setColumns(20);
        editor_JTextArea.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        editor_JTextArea.setForeground(new java.awt.Color(255, 255, 255));
        editor_JTextArea.setRows(5);
        jScrollPane1.setViewportView(editor_JTextArea);

        javax.swing.GroupLayout body_JPanelLayout = new javax.swing.GroupLayout(body_JPanel);
        body_JPanel.setLayout(body_JPanelLayout);
        body_JPanelLayout.setHorizontalGroup(
            body_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(body_JPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 794, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        body_JPanelLayout.setVerticalGroup(
            body_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
        );

        menuBar.setBackground(new java.awt.Color(0, 0, 0));
        menuBar.setBorder(null);
        menuBar.setForeground(new java.awt.Color(102, 102, 102));

        file_JMenu.setText("File");
        file_JMenu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        new_JMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        new_JMenuItem.setText("New");
        new_JMenuItem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        new_JMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                new_JMenuItemActionPerformed(evt);
            }
        });
        file_JMenu.add(new_JMenuItem);

        open_JMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        open_JMenuItem.setText("Open");
        open_JMenuItem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        open_JMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                open_JMenuItemActionPerformed(evt);
            }
        });
        file_JMenu.add(open_JMenuItem);

        save_JMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        save_JMenuItem.setText("Save");
        save_JMenuItem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        save_JMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_JMenuItemActionPerformed(evt);
            }
        });
        file_JMenu.add(save_JMenuItem);

        saveAs_JMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveAs_JMenuItem.setText("Save As");
        saveAs_JMenuItem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        saveAs_JMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAs_JMenuItemActionPerformed(evt);
            }
        });
        file_JMenu.add(saveAs_JMenuItem);

        exit_JMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exit_JMenuItem.setText("Exit");
        exit_JMenuItem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exit_JMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit_JMenuItemActionPerformed(evt);
            }
        });
        file_JMenu.add(exit_JMenuItem);

        menuBar.add(file_JMenu);

        edit_JMenu.setText("Edit");
        edit_JMenu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        cut_JMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cut_JMenuItem.setText("Cut");
        cut_JMenuItem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cut_JMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cut_JMenuItemActionPerformed(evt);
            }
        });
        edit_JMenu.add(cut_JMenuItem);

        copy_JMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copy_JMenuItem.setText("Copy");
        copy_JMenuItem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        copy_JMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copy_JMenuItemActionPerformed(evt);
            }
        });
        edit_JMenu.add(copy_JMenuItem);

        paste_JMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        paste_JMenuItem.setText("Paste");
        paste_JMenuItem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        paste_JMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paste_JMenuItemActionPerformed(evt);
            }
        });
        edit_JMenu.add(paste_JMenuItem);

        undo_JMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undo_JMenuItem.setText("Undo");
        undo_JMenuItem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        edit_JMenu.add(undo_JMenuItem);

        redo_JMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        redo_JMenuItem.setText("Redo");
        redo_JMenuItem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        edit_JMenu.add(redo_JMenuItem);

        menuBar.add(edit_JMenu);

        help_JMenu.setText("Help");
        help_JMenu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        help_JMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        help_JMenuItem.setText("Help");
        help_JMenuItem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        help_JMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                help_JMenuItemActionPerformed(evt);
            }
        });
        help_JMenu.add(help_JMenuItem);

        about_JMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        about_JMenuItem.setText("About");
        about_JMenuItem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        about_JMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                about_JMenuItemActionPerformed(evt);
            }
        });
        help_JMenu.add(about_JMenuItem);

        menuBar.add(help_JMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolBar_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(body_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolBar_JPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(body_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void new_JMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_new_JMenuItemActionPerformed
        // TODO add your handling code here:
        EnEditorPlus_Main_GUI eepmgui = new EnEditorPlus_Main_GUI();
        eepmgui.setVisible(true);
        eepmgui.setLocation(this.getX()+13,this.getY()+13);
    }//GEN-LAST:event_new_JMenuItemActionPerformed
    private void saveAs_JMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAs_JMenuItemActionPerformed
        // TODO add your handling code here:
        saveFileAs();
    }//GEN-LAST:event_saveAs_JMenuItemActionPerformed

    private void exit_JMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit_JMenuItemActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_exit_JMenuItemActionPerformed

    private void cut_JMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cut_JMenuItemActionPerformed
        // TODO add your handling code here:
        editor_JTextArea.cut();
    }//GEN-LAST:event_cut_JMenuItemActionPerformed

    private void copy_JMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copy_JMenuItemActionPerformed
        // TODO add your handling code here:
        editor_JTextArea.copy();
    }//GEN-LAST:event_copy_JMenuItemActionPerformed

    private void help_JMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_help_JMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_help_JMenuItemActionPerformed

    private void about_JMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_about_JMenuItemActionPerformed
        // TODO add your handling code here:
        about_JDialogue.setLocationRelativeTo(this);
        about_JDialogue.requestFocus();
        about_JDialogue.setVisible(true);
        epane.setContentType("text/html");
        epane.setText("<html>"
                + "<body bgcolor='#404040'>"
                + "</i></b><br/>Release : Alpha<br/>version : 0.5</i></b>"
                + "<p align='justify'>&nbsp;&nbsp;&nbsp;enEditor+ is a new generation plain text\n" +
                "editor. Which has the capability to encrypt the \n" +
                "file inorder to ensure the maximum\n" +
                "security. enEditor+ is an Open-Source project."
                + "its the joint effort of <i><b>'Mr.Rishab P Haridas'</i></b> and <b><i>'Mr.Muhammad Swalah A A'</i></b> at  "
                + "<a href='http://www.alamantechnologies.com' style='color: #009933'><b>AL-AMAN TECHNOLOGIES<b></a>."
                + " The source code of the project is available under"
                + " <i><b>'MIT License with Attribution'</i></b>. Any one who interested can join on the"
                + " <a href='https://github.com/alamantechnologies/eneditor-plus' style='color: #009933'><b>GitHub repository<b></a>."
                + " Don't forget to send your feadback and suggestions."
                + "<br/>Follo us:"
                + "<br/><b><i>"
                + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href='https://www.fb.com/alamantechnologies' style='color: #3b5998;text-decoration: none'>FaceBook</a>"
                + "&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;<a href='https://www.twitter.com/alamantech' style='color: #0084b4;text-decoration: none'>Twitter</a>"
                + "&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;<a href='https://www.youtube.com/channel/UCA08Dl0IbzQnmGWTocP3wbA' style='color: #990000;text-decoration: none'>YouTube</a>"
                + "&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;<a href='https://www.github.com/alamantechnologies' style='color: #1a1a00;text-decoration: none'>GitHub</a>"
                
                + " </p></body></html>");
        epane.addHyperlinkListener(new HyperlinkListener() {
            @Override
            public void hyperlinkUpdate(HyperlinkEvent e) {
                if(e.getEventType() == HyperlinkEvent.EventType.ACTIVATED)
                {
                    if(Desktop.isDesktopSupported())
                    {
                        try{
                            Desktop.getDesktop().browse(e.getURL().toURI());
                        }
                        catch(IOException | URISyntaxException ex)
                        {
                            Logger.getLogger(EnEditorPlus_Main_GUI.class.getName()).log(Level.SEVERE, null, ex);
                            LogManager.logErr(ex);
                        }
                    }
                }
            }
        });
        
    }//GEN-LAST:event_about_JMenuItemActionPerformed

    private void ok_JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ok_JButtonActionPerformed
        // TODO add your handling code here:
        encKey = String.valueOf(password_JPasswordField.getPassword());
        if(!encKey.equals("") && !encKey.equals("null"))
        {
            password_JPasswordField.setText("");
            passwordPrompt_JDialogue.dispose();
            decryptFile();
        }
        else
        {
            
            Gen_Util.showErrorDialog(passwordPrompt_JDialogue,"Password cannot be empty !");
        }
    }//GEN-LAST:event_ok_JButtonActionPerformed

    private void encOk_JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encOk_JButtonActionPerformed
        // TODO add your handling code here:
        encKey = String.valueOf(encPass1_JPasswordField.getPassword());
        if(encKey.equals("") || encKey.equals("null"))
        {
            Gen_Util.showErrorDialog("Password cannot be empty");
        }
        else
        {
            if(encKey.equals(String.valueOf(encPass2_JPasswordField.getPassword())))
            {
                encPass1_JPasswordField.setText("");
                encPass2_JPasswordField.setText("");
                encPasswordPrompt_JDialogue.dispose();
                saveFile();
            }
            else
            {
                Gen_Util.showErrorDialog("Password Missmatches;");
                passStatus.setText("doesn't match !");
            }
        }
    }//GEN-LAST:event_encOk_JButtonActionPerformed

    private void encPass1_JPasswordFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_encPass1_JPasswordFieldKeyTyped
        // TODO add your handling code here:
        String p1,p2;
        p1 = String.valueOf(encPass1_JPasswordField.getPassword());
        p1 = p1+evt.getKeyChar();
        p2 = String.valueOf(encPass2_JPasswordField.getPassword());
        if(p1.equals(p2))
        {
            passStatus.setText("password correct.");
        }
        else
        {
            passStatus.setText("doesn't match !");
        }
    }//GEN-LAST:event_encPass1_JPasswordFieldKeyTyped

    private void encPass2_JPasswordFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_encPass2_JPasswordFieldKeyTyped
        // TODO add your handling code here:
       if(true)
       {
            String p1,p2;
            p1 = String.valueOf(encPass1_JPasswordField.getPassword());

            p2 = String.valueOf(encPass2_JPasswordField.getPassword());
            p2 = p2+evt.getKeyChar();
            if(p1.equals(p2))
            {
                passStatus.setText("password correct.");
            }
            else
            {
                passStatus.setText("doesn't match !");
            }
       }
    }//GEN-LAST:event_encPass2_JPasswordFieldKeyTyped

    private void password_JPasswordFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_password_JPasswordFieldKeyPressed
        // TODO add your handling code here:if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            encKey = String.valueOf(password_JPasswordField.getPassword());
            if(!encKey.equals("") && !encKey.equals("null"))
            {
                passwordPrompt_JDialogue.dispose();
                encKey = String.valueOf(password_JPasswordField.getPassword());
                decryptFile();
            }
            else
            {
                Gen_Util.showErrorDialog(passwordPrompt_JDialogue,"Password cannot be empty !");
            }
        }
    }//GEN-LAST:event_password_JPasswordFieldKeyPressed

    private void encPass2_JPasswordFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_encPass2_JPasswordFieldKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            encKey = String.valueOf(encPass1_JPasswordField.getPassword());
            if(encKey.equals("") || encKey.equals("null"))
            {
                Gen_Util.showErrorDialog("Password cannot be empty");
            }
            else
            {
                if(encKey.equals(String.valueOf(encPass2_JPasswordField.getPassword())))
                {
                    encPasswordPrompt_JDialogue.dispose();
                    saveFile();
                }
                else
                {
                    Gen_Util.showErrorDialog("Password Missmatches;");
                    passStatus.setText("doesn't match !");
                }
            }
        }
    }//GEN-LAST:event_encPass2_JPasswordFieldKeyPressed

    private void paste_JMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paste_JMenuItemActionPerformed
        // TODO add your handling code here:
        editor_JTextArea.paste();
    }//GEN-LAST:event_paste_JMenuItemActionPerformed

    private void open_JMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_open_JMenuItemActionPerformed
        // TODO add your handling code here:
         jsf = new JFileChooser();
        jsf.setApproveButtonText("Open");
        jsf.setApproveButtonToolTipText("Open Seleced File");
        jsf.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jsf.setDialogTitle("Open File");
        
        jsf.addChoosableFileFilter(new FileNameExtensionFilter("Text File", "txt"));
        jsf.addChoosableFileFilter(new FileNameExtensionFilter("Encrypted File", "enc"));
        jsf.setAcceptAllFileFilterUsed(false);
        
        if(jsf.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {   
            filePath = jsf.getSelectedFile().getAbsolutePath();
            openFile();
        }
    }//GEN-LAST:event_open_JMenuItemActionPerformed

    private void save_JMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_JMenuItemActionPerformed
        // TODO add your handling code here:
        if(isFileSaved)
        {
            saveFile();
        }
        else
        {
            saveFileAs();
        }
    }//GEN-LAST:event_save_JMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EnEditorPlus_Main_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            LogManager.logErr(ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EnEditorPlus_Main_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            LogManager.logErr(ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EnEditorPlus_Main_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            LogManager.logErr(ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EnEditorPlus_Main_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            LogManager.logErr(ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                EnEditorPlus_Main_GUI eepmgui = new EnEditorPlus_Main_GUI();
                eepmgui.setVisible(true);
                if(args.length>0)
                {
                    eepmgui.filePath = args[0];
                    eepmgui.openFile();
                }
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog about_JDialogue;
    private javax.swing.JMenuItem about_JMenuItem;
    private javax.swing.JPanel body_JPanel;
    private javax.swing.JLabel companyLogo_JLabel;
    private javax.swing.JMenuItem copy_JMenuItem;
    private javax.swing.JMenuItem cut_JMenuItem;
    private javax.swing.JMenu edit_JMenu;
    private javax.swing.JTextArea editor_JTextArea;
    private javax.swing.JButton encOk_JButton;
    private javax.swing.JPasswordField encPass1_JPasswordField;
    private javax.swing.JPasswordField encPass2_JPasswordField;
    private javax.swing.JDialog encPasswordPrompt_JDialogue;
    private javax.swing.JEditorPane epane;
    private javax.swing.JMenuItem exit_JMenuItem;
    private javax.swing.JMenu file_JMenu;
    private javax.swing.JMenu help_JMenu;
    private javax.swing.JMenuItem help_JMenuItem;
    private javax.swing.JLabel icon_JLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem new_JMenuItem;
    private javax.swing.JButton ok_JButton;
    private javax.swing.JMenuItem open_JMenuItem;
    private javax.swing.JLabel passStatus;
    private javax.swing.JDialog passwordPrompt_JDialogue;
    private javax.swing.JPasswordField password_JPasswordField;
    private javax.swing.JMenuItem paste_JMenuItem;
    private javax.swing.JMenuItem redo_JMenuItem;
    private javax.swing.JMenuItem saveAs_JMenuItem;
    private javax.swing.JMenuItem save_JMenuItem;
    private javax.swing.JPanel toolBar_JPanel;
    private javax.swing.JMenuItem undo_JMenuItem;
    // End of variables declaration//GEN-END:variables

    
    private UndoManager undoManager;
    private Document doc;
    private boolean isFileSaved;
    private boolean isEncrypted;
    private String savedEncKey;
    private String encKey;
    private String filePath;
    private JFileChooser jsf;
    CryptoUtil cryptoUtil = new CryptoUtil();
    private void setLocationRelativeToCenter() {
        setLocationRelativeTo(null);
    }
    private void setIcon()
    {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/org/alamantechnologies/eneditorplus/img/eneditor-icon.jpg")));
    }
    private void decryptFile()
    {
        try 
        {
            String planeText;
            String cipherText;
            FileReader fR = new FileReader(filePath);
            BufferedReader br = new BufferedReader(fR);
            editor_JTextArea.read(br, null);
            br.close();
            cipherText = editor_JTextArea.getText();
            savedEncKey = cipherText.substring(0,32);
            if(savedEncKey.equals(MD5Hash.getMD5Hash(Security.getSalt()+encKey+Security.getSalt())))
            {
                cipherText = cipherText.substring(32);
                try{
                    planeText = cryptoUtil.decrypt(encKey, cipherText);
                    editor_JTextArea.setText(planeText);
                    initUndoRedo();
                    isFileSaved = true;
                } catch (NoSuchAlgorithmException | InvalidKeySpecException | NoSuchPaddingException | InvalidKeyException | InvalidAlgorithmParameterException | UnsupportedEncodingException | IllegalBlockSizeException | BadPaddingException ex) {
                    Logger.getLogger(EnEditorPlus_Main_GUI.class.getName()).log(Level.SEVERE, null, ex);
                    LogManager.logErr(ex);
                }
            }
            else
            {
                Gen_Util.showErrorDialog("Incorrect Password or Enc Key!");
                editor_JTextArea.setText("");
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(EnEditorPlus_Main_GUI.class.getName()).log(Level.SEVERE, null, ex);
            LogManager.logErr(ex);
        } catch (IOException ex) {
            Logger.getLogger(EnEditorPlus_Main_GUI.class.getName()).log(Level.SEVERE, null, ex);
            LogManager.logErr(ex);
        }
        
    }

    private void saveFile() {
        String planeText;
        String cipherText;
        FileWriter fileWriter = null;
        BufferedWriter bufferedWriter = null;
        
        if(isEncrypted)
        {
            planeText = editor_JTextArea.getText();
            savedEncKey = MD5Hash.getMD5Hash(Security.getSalt()+encKey+Security.getSalt());
            try
            {
                cipherText = cryptoUtil.encrypt(encKey, planeText);
                cipherText = savedEncKey+cipherText;
                editor_JTextArea.setText(cipherText);
                
                fileWriter = new FileWriter(filePath);
                bufferedWriter = new BufferedWriter(fileWriter);
                editor_JTextArea.write(bufferedWriter);
                
                
            } catch (NoSuchAlgorithmException | InvalidKeySpecException | NoSuchPaddingException | InvalidKeyException | InvalidAlgorithmParameterException | UnsupportedEncodingException | IllegalBlockSizeException | BadPaddingException ex) {
                Logger.getLogger(EnEditorPlus_Main_GUI.class.getName()).log(Level.SEVERE, null, ex);
                LogManager.logErr(ex);
            } catch (IOException ex) {
                Logger.getLogger(EnEditorPlus_Main_GUI.class.getName()).log(Level.SEVERE, null, ex);
                LogManager.logErr(ex);
            }
            finally{
                try{
                    fileWriter.flush();
                    bufferedWriter.flush();
                    fileWriter.close();
                    bufferedWriter.close();
                    isFileSaved = true;
                    editor_JTextArea.setText(planeText);
                } catch (IOException ex) {
                    Logger.getLogger(EnEditorPlus_Main_GUI.class.getName()).log(Level.SEVERE, null, ex);
                    LogManager.logErr(ex);
                }
            }
            
        }
        else
        {
            try 
            {
                fileWriter = new FileWriter(filePath);
                bufferedWriter = new BufferedWriter(fileWriter);
                editor_JTextArea.write(bufferedWriter);
                
            } catch (IOException ex) {
                Logger.getLogger(EnEditorPlus_Main_GUI.class.getName()).log(Level.SEVERE, null, ex);
                LogManager.logErr(ex);
            } finally {
                try {
                    fileWriter.flush();
                    bufferedWriter.flush();
                    fileWriter.close();
                    bufferedWriter.close();
                    isFileSaved = true;
                } catch (IOException ex) {
                    Logger.getLogger(EnEditorPlus_Main_GUI.class.getName()).log(Level.SEVERE, null, ex);
                    LogManager.logErr(ex);
                }
            }
            
        }
    }

    private void openFile() {
        editor_JTextArea.setText("");
        if(filePath.endsWith(".txt"))
        {
            isEncrypted = false;
            try
            {
                FileReader fileReader = new FileReader(filePath);
                BufferedReader br = new BufferedReader(fileReader);
                editor_JTextArea.read(br, null);
                
                br.close();
                isFileSaved = true;
                initUndoRedo();

            } catch (FileNotFoundException ex) {
                Logger.getLogger(EnEditorPlus_Main_GUI.class.getName()).log(Level.SEVERE, null, ex);
                LogManager.logErr(ex);
            } catch (IOException ex) {
                Logger.getLogger(EnEditorPlus_Main_GUI.class.getName()).log(Level.SEVERE, null, ex);
                LogManager.logErr(ex);
            }
        }
        else if(filePath.endsWith(".enc"))
        {
            isEncrypted = true;
            password_JPasswordField.setEchoChar('\u2022');
            passwordPrompt_JDialogue.setLocationRelativeTo(null);
            passwordPrompt_JDialogue.requestFocus();
            passwordPrompt_JDialogue.setVisible(true);
        }
        else
        {
            if(Gen_Util.showConfirmDialog("Unsupported File!\nDo you want to Open it Anyway ?",JOptionPane.ERROR_MESSAGE)==0)
            {
                isEncrypted = false;
                try
                {
                    FileReader fileReader = new FileReader(filePath);
                    BufferedReader br = new BufferedReader(fileReader);
                    editor_JTextArea.read(br, null);
                    br.close();
                    isFileSaved = true;
                    initUndoRedo();

                } catch (FileNotFoundException ex) {
                    Logger.getLogger(EnEditorPlus_Main_GUI.class.getName()).log(Level.SEVERE, null, ex);
                    LogManager.logErr(ex);
                } catch (IOException ex) {
                    Logger.getLogger(EnEditorPlus_Main_GUI.class.getName()).log(Level.SEVERE, null, ex);
                    LogManager.logErr(ex);
                }
            }
        }
    }

    private void saveFileAs() 
    {
        jsf = new JFileChooser();
        jsf.setApproveButtonText("Open");
        jsf.setApproveButtonToolTipText("Open Seleced File");
        jsf.setFileSelectionMode(JFileChooser.FILES_ONLY);

        jsf.addChoosableFileFilter(new FileNameExtensionFilter("Text File", "txt"));
        jsf.addChoosableFileFilter(new FileNameExtensionFilter("Encrypted File", "enc"));
        jsf.setAcceptAllFileFilterUsed(false);

        if(jsf.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            filePath = jsf.getSelectedFile().getAbsolutePath();
            if(!filePath.endsWith(".txt") && !filePath.endsWith(".enc"))
            {
                switch(String.valueOf(jsf.getFileFilter().getDescription()))
                {
                    case "Text File":
                    {
                        filePath = filePath+".txt";
                    };break;
                    case "Encrypted File":
                    {
                        filePath = filePath+".enc";
                    };break;
                }
            }
            if(filePath.endsWith(".enc"))
            {
                isEncrypted = true;
                encPass1_JPasswordField.setEchoChar('\u2022');
                encPass2_JPasswordField.setEchoChar('\u2022');
                encPasswordPrompt_JDialogue.setLocationRelativeTo(this);
                encPasswordPrompt_JDialogue.requestFocus();
                encPasswordPrompt_JDialogue.setVisible(true);

            }
            else
            {
                isEncrypted = false;
                saveFile();
            }
        } 
    }
    
    public void updateButtons() {
        undo_JMenuItem.setText(undoManager.getUndoPresentationName());
        redo_JMenuItem.setText(undoManager.getRedoPresentationName());
        undo_JMenuItem.setEnabled(undoManager.canUndo());
        redo_JMenuItem.setEnabled(undoManager.canRedo());
    }
    private void initUndoRedo()
    {
        undo_JMenuItem.setEnabled(false);
        redo_JMenuItem.setEnabled(false);
        
        doc = editor_JTextArea.getDocument();
        doc.addUndoableEditListener(new UndoableEditListener() {
            @Override
            public void undoableEditHappened(UndoableEditEvent e) {
                undoManager.addEdit(e.getEdit());
                updateButtons();
            }
        });
    }
    
    /**/
}
